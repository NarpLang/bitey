#!/usr/bin/sudo bash
set -e

VERSION=1.6

BITEY=/usr/bitey

if [[ "$1" == "install" ]]; then
    if [[ -f "$BITEY/lock" ]]; then
        echo "üîí Bitey is locked. Run 'sudo bitey unlock' to remove the lock."
        exit 1
    fi
    sudo touch "$BITEY/lock"

    if [[ ! -d "$BITEY/software" ]]; then
        mkdir "$BITEY/software"
    fi

    REMOTE_NAME="$2"
    shift 2  # Remove the first two args (install + remote)

    for SOFTWARE_NAME in "$@"; do
        REMOTE_ADDON="$BITEY/addons/remote-$REMOTE_NAME"
        INSTALL_PATH="$BITEY/software/$SOFTWARE_NAME"

        if [[ ! -f "$REMOTE_ADDON/remote.sh" ]]; then
            echo "‚ùå Remote '$REMOTE_NAME' not found or invalid."
            exit 1
        fi

        source "$REMOTE_ADDON/remote.sh"

        if [[ -z "$REMOTE" ]]; then
            echo "‚ùå REMOTE variable not set in $REMOTE_ADDON/remote.sh."
            exit 1
        fi

        if [[ -d "$INSTALL_PATH" ]]; then
            echo "‚ö†Ô∏è $SOFTWARE_NAME is already installed at $INSTALL_PATH. Skipping..."
            continue
        fi

        echo "üì¶ Installing $SOFTWARE_NAME."
        sudo git clone "$REMOTE/$SOFTWARE_NAME" "$INSTALL_PATH" || {
            echo "‚ùå Installation failure."
            exit 1
        }

        cd "$INSTALL_PATH" || exit 1

        if [[ ! -f project/paths.txt ]]; then
            echo "‚ùå Installation invalid."
            rm -rf "$INSTALL_PATH"
            exit 1
        fi

        DEPENDS_FILE="project/depends.txt"
        if [[ -f "$DEPENDS_FILE" ]]; then
            source "$DEPENDS_FILE"
            sudo bitey unlock
            for dep in "${DEPENDS[@]}"; do
                echo "üì¶ Installing dependency $dep..."
                sudo bitey install "$dep"
            done
            sudo bitey lock
        fi

        sudo bash "project/install.sh"
        sudo chmod +x "$INSTALL_PATH/bin/"*
        echo "$INSTALL_PATH" | sudo tee -a "$BITEY/project/bitey_paths"
        echo "$INSTALL_PATH/bin" | sudo tee -a "$BITEY/project/biteyrc"

        cd - > /dev/null
    done

    sudo rm "$BITEY/lock"
    exit 0
fi

if [[ "$1" == "remove" ]]; then
    if [[ -f "$BITEY/lock" ]]; then
        echo "üîí Bitey is locked. Run 'sudo bitey unlock' to remove the lock."
        exit 1
    fi
    sudo touch "$BITEY/lock"
    shift 1  # Remove "remove" argument

    for SOFTWARE_NAME in "$@"; do
        INSTALL_PATH="$BITEY/software/$SOFTWARE_NAME"

        if [[ ! -d "$INSTALL_PATH" ]]; then
            echo "‚ùå $SOFTWARE_NAME is not installed."
            continue
        fi

        cd "$INSTALL_PATH" || continue

        if [[ -f project/remove.sh ]]; then
            echo "üîß Running remove script for $SOFTWARE_NAME..."
            sudo bash "project/remove.sh"
        else
            echo "‚ö†Ô∏è No remove script found, continuing with raw removal."
        fi

        echo "üóëÔ∏è Removing $SOFTWARE_NAME..."
        sudo rm -rf "$INSTALL_PATH"

        # Clean bitey_paths and biteyrc
        sudo sed -i "\|$INSTALL_PATH\$|d" "$BITEY/project/bitey_paths"
        sudo sed -i "\|$INSTALL_PATH/bin\$|d" "$BITEY/project/biteyrc"

        echo "‚úÖ Removed $SOFTWARE_NAME."
        cd - > /dev/null
    done

    sudo rm "$BITEY/lock"
    exit 0
fi

if [[ "$1" == "update" ]]; then
    if [[ -f "$BITEY/lock" ]]; then
        echo "üîí Bitey is locked. Run 'sudo bitey unlock' to remove the lock."
        exit 1
    fi
    sudo touch "$BITEY/lock"
    mapfile -t BITEYRC < $BITEY/project/biteyrc
    mapfile -t BITEY_PATHS < $BITEY/project/bitey_paths
    for path in "${BITEY_PATHS[@]}"; do
        if [ -d "$path" ]; then
            cd "$path" || continue
            
            echo "üîÑ Updating path $path..."
            sudo git reset --hard HEAD
            sudo git pull
            sudo chmod +x bin/*
            if [[ -f project/update.sh ]]; then
                echo "üîß Running update script..."
                sudo bash "project/update.sh"
            fi
            cd - > /dev/null || exit 0
        fi
    done
    printf "%s\n" "${BITEY_PATHS[@]}" | sudo tee "$BITEY/project/bitey_paths" > /dev/null
    printf "%s\n" "${BITEYRC[@]}" | sudo tee "$BITEY/project/biteyrc" > /dev/null
    sudo rm "$BITEY/lock"
    exit 0
fi

if [[ "$1" == "list" ]]; then
    INSTALL_DIR="/usr/bitey/software"
    if [[ ! -d "$INSTALL_DIR" ]]; then
        echo "‚ùå No packages installed."
        exit 1
    fi

    echo "üì¶ Installed Bitey packages:"
    for pkg in "$INSTALL_DIR"/*; do
        [[ -d "$pkg" ]] || continue
        pkgname=$(basename "$pkg")
        echo " - $pkgname"
    done

    exit 0
fi

if [[ $# -eq 0 ]]; then
    echo "‚ùî Run 'bitey --help' for usage"
    exit 0
fi

HELP_MSG="$(cat <<EOF
üí° Bitey Help
Usage: $0 [OPTIONS]

Packages:
    install <remote> <package> - Install a package.
    remove <package> - Remove a package.
    list - List installed packages.
    update - Update all packages.
    info <package> - See the package information.
Lock:
    lock - Lock Bitey.
    unlock - Unlock Bitey.
Installation:
    doctor - Analyze your installation of Bitey.
    --version - Check the version of your Bitey Installation.
Help:
    --help - See the help message.
EOF
)"

if [[ "$1" == "--help" ]]; then
    echo "$HELP_MSG"
    exit 0
fi


if [[ "$1" == "--version" ]]; then
    echo "üç´ Bitey $VERSION"
    exit 0
fi

if [[ "$1" == "info" ]]; then
    PACKAGE="$2"
    PACKAGE_DIR="$BITEY/software/$PACKAGE"

    if [[ -z "$PACKAGE" ]]; then
        echo "‚ùå Please provide a package name."
        exit 1
    fi

    if [[ ! -f "$PACKAGE_DIR/pak.conf" ]]; then
        echo "‚ùå Package '$PACKAGE' is not installed."
        exit 1
    fi

    source "$PACKAGE_DIR/pak.conf"

    echo "üì¶ Package Info: $PACKAGE"
    echo "Name: ${PACKAGE_NAME:-$PACKAGE}"
    echo "Version: ${PACKAGE_VERSION:-Unknown}"
    echo "Maintainer: ${PACKAGE_MAINTAINER:-Unknown}"
    echo "Description: ${PACKAGE_DESCRIPTION:-No description}"
    echo "Location: $PACKAGE_DIR"
    exit 0
fi

if [[ "$1" == "lock" ]]; then
    if [[ -f "$BITEY/lock" ]]; then
        echo -e "üîí Bitey is already locked.\nRun 'sudo bitey unlock' to remove the lock."
        exit 1
    fi
    sudo touch "$BITEY/lock"
    echo -e "üîí Bitey has been locked.\nRun 'sudo bitey unlock' to remove the lock."
fi

if [[ "$1" == "unlock" ]]; then
    if [[ ! -f "$BITEY/lock" ]]; then
        echo -e "üîì Bitey is already unlocked.\nRun 'sudo bitey lock' to create the lock."
    fi
    sudo rm "$BITEY/lock"
    echo -e "üîì Bitey has been unlocked.\nRun 'sudo bitey lock' to create the lock."
fi

if [[ "$1" == "doctor" ]]; then
    echo "ü©∫ Bitey Doctor Report"
    echo

    # Lock status
    if [[ -f "$BITEY/lock" ]]; then
        echo "üîê Lock status:        ‚ùå Locked"
    else
        echo "üîê Lock status:        ‚úÖ Unlocked"
    fi

    # Bitey root directory
    if [[ -d "$BITEY" ]]; then
        echo "üìÇ BITEY directory:    ‚úÖ $BITEY"
    else
        echo "üìÇ BITEY directory:    ‚ùå Not found"
    fi

    # Installed packages
    if [[ -d "$BITEY/software" ]]; then
        PKGS=$(ls "$BITEY/software" 2>/dev/null | wc -l)
        echo "üì¶ Installed packages: ‚úÖ $PKGS packages found"
    else
        echo "üì¶ Installed packages: ‚ùå None"
    fi

    # Broken packages
    BROKEN_PKGS=0
    for pkg in "$BITEY/pkg"/*; do
        [[ -d "$pkg" ]] || continue
        PKGNAME=$(basename "$pkg")
        if [[ ! -f "$pkg/files/install.sh" && ! -f "$pkg/install.sh" ]]; then
            echo "üß© Broken package:     ‚ùå $PKGNAME (no install.sh)"
            BROKEN_PKGS=$((BROKEN_PKGS + 1))
        fi
    done
    [[ $BROKEN_PKGS -eq 0 ]] && echo "üß© Broken packages:    ‚úÖ None"

    # Orphaned packages (no deps requiring them)
    ORPHANS=()
    for pkg in "$BITEY/pkg"/*; do
        [[ -d "$pkg" ]] || continue
        PKGNAME=$(basename "$pkg")
        found_dep=0
        for depfile in "$BITEY/pkg"/*/depends.conf; do
            grep -q "$PKGNAME" "$depfile" && found_dep=1 && break
        done
        [[ $found_dep -eq 0 ]] && ORPHANS+=("$PKGNAME")
    done

    if [[ ${#ORPHANS[@]} -eq 0 ]]; then
        echo "üßπ Orphan packages:    ‚úÖ None"
    else
        echo "üßπ Orphan packages:    ‚ö†Ô∏è  ${ORPHANS[*]}"
    fi

    # Remotes
    if [[ -d "$BITEY/addons" ]]; then
        REMOTES=$(find "$BITEY/addons" -maxdepth 1 -type d -name "remote-*" | wc -l)
        if [[ "$REMOTES" -gt 0 ]]; then
            echo "üåê Remotes configured: ‚úÖ $REMOTES remotes"
        else
            echo "üåê Remotes configured: ‚ùå None found"
        fi
    else
        echo "üåê Remotes configured: ‚ùå None found"
    fi


    echo
    echo "‚úÖ All checks complete."
    exit 0
fi

